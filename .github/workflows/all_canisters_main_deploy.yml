name: Deploy all canisters to IC mainnet on push to main
on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - ".github/workflows/all_canisters_main_deploy.yml"

jobs:
  deploy:
    name: Deploy all canisters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Cache install Nix packages
        uses: rikhuijzer/cache-install@v1.0.9
        with:
          key: nix-${{ hashFiles('default.nix') }}
      - name: Cache rust dependencies, build output and DFX build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .dfx/
          key: rust-deploy-${{ hashFiles('**/Cargo.lock') }}
      - name: Import DFX identity
        run: |
          touch actions_identity.pem
          echo "${{ secrets.CANISTER_CONTROLLER_SECRET_KEY }}" > actions_identity.pem
          nix-shell --run "dfx identity import --disable-encryption actions actions_identity.pem"
          rm actions_identity.pem
          nix-shell --run "dfx identity use actions"
      - name: Cache rust dependencies, build output and DFX build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .dfx/
          key: ${{ runner.os }}-deploy-${{ hashFiles('**/Cargo.lock') }}
      - name: Build configuration canister
        run: |
          nix-shell --run "dfx build --network ic configuration"
      - name: Build data_backup canister
        run: |
          nix-shell --run "dfx build --network ic data_backup"
      - name: Build individual_user_template canister
        run: |
          nix-shell --run "dfx build --network ic individual_user_template"
          gzip -f -1 ./target/wasm32-unknown-unknown/release/individual_user_template.wasm
      - name: Build user_index canister
        run: |
          nix-shell --run "dfx build --network ic user_index"
      - name: Build post_cache canister
        run: |
          nix-shell --run "dfx build --network ic post_cache"
      - name: Deploy configuration canister
        run: nix-shell --run "dfx canister install configuration --network ic --mode upgrade --argument '(record {})' --yes"
      - name: Deploy data_backup canister
        run: nix-shell --run "dfx canister install data_backup --network ic --mode upgrade --argument '(record {})' --yes"
      - name: Deploy post_cache canister
        run: nix-shell --run "dfx canister install post_cache --network ic --mode upgrade --argument '(record {})' --yes"
      - name: Deploy user_index canister
        run: nix-shell --run "dfx canister install user_index --network ic --mode upgrade --argument '(record {})' --yes"
      - name: Loop through and deploy all individual user canisters
        run: nix-shell --run "dfx canister call user_index update_user_index_upgrade_user_canisters_with_latest_wasm --network ic --async"
